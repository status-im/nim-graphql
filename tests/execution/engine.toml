[[units]]
  name = "operation not found"
  opName = "blabla"
  errors = ["[0, 0]: Fatal: Operation not found: 'blabla': @[]"]
  code = """
type Query {
  name: String
}
query myquery {
  name
}
"""
  result = """
null
"""

[[units]]
  name = "have more than one root operation but no opName"
  errors = ["[7, 7]: Fatal: Have more than one root operation, requires operationName: @[]"]
  code = """
type Query {
  name: String
}
query myquery {
  name
}
query banana {
  name
}
"""
  result = """
null
"""

[[units]]
  name = "operation found although there is no opName"
  code = """
type Query {
  name: String
}
query myquery {
  name
}
"""
  result = """
{
  "name": "superman"
}
"""

[[units]]
  name = "operation found"
  opName = "myquery"
  code = """
type Query {
  name: String
}
query myquery {
  name
}
"""
  result = """
{
  "name": "superman"
}
"""

[[units]]
  name = "@skip(if: false)"
  code = """
type Query {
  name: String
  color: Int
}
{
  name
  color @skip(if: false)
}
"""
  result = """
{
  "name":"superman",
  "color":567
}
"""

[[units]]
  name = "@skip(if: true)"
  code = """
type Query {
  name: String
  color: Int
}
{
  name
  color @skip(if: true)
}
"""
  result = """
{
  "name":"superman"
}
"""

[[units]]
  name = "@skip(if: $myTrue)"
  variables = "{myTrue: true}"
  code = """
type Query {
  name: String
  color: Int
}
query ($myTrue: Boolean!) {
  name
  color @skip(if: $myTrue)
}
"""
  result = """
{
  "name":"superman"
}
"""

[[units]]
  name = "@skip(if: $myFalse)"
  variables = "{myFalse: false}"
  code = """
type Query {
  name: String
  color: Int
}
query ($myFalse: Boolean!) {
  name
  color @skip(if: $myFalse)
}
"""
  result = """
{
  "name":"superman",
  "color":567
}
"""

[[units]]
  name = "@include(if: false)"
  code = """
type Query {
  name: String
  color: Int
}
{
  name
  color @include(if: false)
}
"""
  result = """
{
  "name":"superman"
}
"""

[[units]]
  name = "@include(if: true)"
  code = """
type Query {
  name: String
  color: Int
}
{
  name
  color @include(if: true)
}
"""
  result = """
{
  "name":"superman",
  "color":567
}
"""

[[units]]
  name = "@include(if: $myTrue)"
  variables = "{myTrue: true}"
  code = """
type Query {
  name: String
  color: Int
}
query ($myTrue: Boolean!) {
  name
  color @include(if: $myTrue)
}
"""
  result = """
{
  "name":"superman",
  "color":567
}
"""

[[units]]
  name = "@include(if: $myFalse)"
  variables = "{myFalse: false}"
  code = """
type Query {
  name: String
  color: Int
}
query ($myFalse: Boolean!) {
  name
  color @include(if: $myFalse)
}
"""
  result = """
{
  "name":"superman"
}
"""

[[units]]
  name = "merge very basic field"
  code = """
type Query {
  name: String
  color: Int
}
query {
  name
  name
}
"""
  result = """
{
  "name":"superman"
}
"""

[[units]]
  name = "simple field alias"
  code = """
type Query {
  name: String
  color: Int
}
query {
  name
  jumbo: name
}
"""
  result = """
{
  "name":"superman",
  "jumbo":"superman"
}
"""

[[units]]
  name = "field in set can merge should merge"
  code = """
type Tree {
  name: String
  age: Int
}
type Query {
  tree: Tree
}
{
  tree { name }
  tree { name }
  tree { age }
  tree { age }
}
"""
  result = """
{
  "tree":{
    "name":"hardwood",
    "age":100
  }
}
"""

[[units]]
  name = "execution path"
  errors = ["[11, 5]: Error: 'age' got '100': expect string, but got 'Int': @[\"tree\", \"age\"]"]
  code = """
type Tree {
  name: String
  age: String
}
type Query {
  tree: Tree
}
{
  tree {
    name
    age
  }
}
"""
  result = """
{
  "tree":{
    "name":"hardwood",
    "age":null
  }
}
"""

[[units]]
  name = "null in a list with nullable item"
  code = """
type Tree {
  name: String
  number: [Int]
}
type Query {
  tree: Tree
}
{
  tree {
    number
    name
  }
}
"""
  result = """
{
  "tree":{
    "number":[345,null,789],
    "name":"hardwood"
  }
}
"""

[[units]]
  name = "execution path with list index"
  errors = ["[10, 5]: Fatal: Field 'number' should not return null: @[\"tree\", \"number\", 1]"]
  code = """
type Tree {
  name: String
  number: [Int!]
}
type Query {
  tree: Tree
}
{
  tree {
    number
    name
  }
}
"""
  result = """
{
  "tree":{
    "number":null,
    "name":"hardwood"
  }
}
"""

[[units]]
  name = "error in [Int!]! propagate upward to parent"
  errors = ["[10, 5]: Fatal: Field 'number' should not return null: @[\"tree\", \"number\", 1]"]
  code = """
type Tree {
  name: String
  number: [Int!]!
}
type Query {
  tree: Tree
}
{
  tree {
    number
    name
  }
}
"""
  result = """
null
"""

[[units]]
  name = "execution error should have better text position"
  errors = ["[5, 3]: Fatal: Field '__type' cannot be resolved: \"'__Querys' not defined\": @[\"__type\"]"]
  opName = "intros"
  code = """
type Query {
  name: String
}
query intros {
  __type(name: "__Querys") {
    fields {
      name
    }
  }
}
"""
  result = """
{
  "__type":null
}
"""

[[units]]
  name = "missing input object field should be filled and ordered by executor"
  code = """
input EchoInput {
  one: String
  two: Int
  three: Boolean = false
  four: Float = 456.7
  five: ID
}
type Echo {
  one: String
  two: Int
  three: Boolean
  four: Float
  five: ID
}
type Query {
  echo(arg: EchoInput): Echo
}
{
  echo(arg: {two: 666, one: "Hello"}) {
    one
    two
    three
    four
    five
  }
}
"""
  result = """
{
  "echo":{
    "one":"Hello",
    "two":666,
    "three":false,
    "four":456.7,
    "five":null
  }
}
"""

[[units]]
  name = "missing params should be filled and ordered by executor"
  code = """
type Echo {
  one: String
  two: Int
  three: Boolean
  four: Float
  five: ID
}
type Query {
  echoArg(one: String, two: Int, three: Boolean = false, four: Float = 456.7, five: ID): Echo
}
{
  echoArg(two: 666, one: "Hello") {
    one
    two
    three
    four
    five
  }
}
"""
  result = """
{
  "echoArg":{
    "one":"Hello",
    "two":666,
    "three":false,
    "four":456.7,
    "five":null
  }
}
"""

[[units]]
  name = "missing params should be filled and ordered by executor, 2nd level"
  code = """
type Echo {
  one: String
  two: Int
  three: Boolean
  four: Float
  five: ID
}
type Tree {
  echoArg(one: String, two: Int, three: Boolean = false, four: Float = 456.7, five: ID): Echo
}
type Query {
  tree: Tree
}
{
  tree {
    echoArg(two: 666, one: "Hello") {
      one
      two
      three
      four
      five
    }
  }
}
"""
  result = """
{
  "tree":{
    "echoArg":{
      "one":"Hello",
      "two":666,
      "three":false,
      "four":456.7,
      "five":null
    }
  }
}
"""

[[units]]
  name = "variable coercion, string to enum"
  variables = """{myApple: "APPLE"}"""
  code = """
enum Fruits {
  APPLE
  BANANA
}
type Query {
  checkFruit(arg: Fruits): String
}
query ($myApple: Fruits) {
  checkFruit(arg: $myApple)
}
"""
  result = """
{
  "checkFruit":"GOOD"
}
"""

[[units]]
  name = "introspection __typename on not defined type"
  errors = ["[5, 3]: Fatal: Field 'int_t' cannot be resolved: \"'__Int' not defined\": @[\"int_t\"]"]
  code = """
type Query {
  name: String
}
query {
  int_t: __type(name: "__Int") {
    __typename
  }

  float_t: __type(name: "Float") {
    __typename
  }
}
"""
  result = """
{
  "int_t":null,
  "float_t":{"__typename":"Float"}
}
"""

[[units]]
  name = "inline fragment with interface and object"
  code = """
interface Creature {
  name: String
}
type Tree implements Creature {
  name: String
  age: Int
}
enum COLORS {
  RED
  YELLOW
  GREEN
}
type Bird implements Creature {
  name: String
  color: COLORS
}
type Query {
  creatures: [Creature]
}
{
  creatures {
    __typename
    ... on Creature {
      name
    }
    ... on Tree {
      age
    }
    ... on Bird {
      color
    }
  }
}
"""
  result = """
 {
   "creatures":[
     {
       "__typename":"Tree",
       "name":"redwood",
       "age":100
     },
     {
        "__typename":"Bird",
        "name":"parrot",
        "color":"RED"
     }
   ]
 }
"""

[[units]]
  name = "inline fragment with union and object"
  code = """
type Tree {
  name: String
  age: Int
}
enum COLORS {
  RED
  YELLOW
  GREEN
}
type Bird {
  name: String
  color: COLORS
}
union Creature = Tree | Bird
type Query {
  creatures: [Creature]
}
{
  creatures {
    __typename
    ... on Tree {
      name
      age
    }
    ... on Bird {
      name
      color
    }
  }
}
"""
  result = """
 {
   "creatures":[
     {
       "__typename":"Tree",
       "name":"redwood",
       "age":100
     },
     {
        "__typename":"Bird",
        "name":"parrot",
        "color":"RED"
     }
   ]
 }
"""

[[units]]
  name = "spread fragment with interface and object"
  code = """
interface Creature {
  name: String
}
type Tree implements Creature {
  name: String
  age: Int
}
enum COLORS {
  RED
  YELLOW
  GREEN
}
type Bird implements Creature {
  name: String
  color: COLORS
}
type Query {
  creatures: [Creature]
}
fragment cName on Creature {
  name
}
fragment hAge on Tree {
  age
}
fragment bColor on Bird {
  color
}
{
  creatures {
    __typename
    ... cName
    ... hAge
    ... bColor
  }
}
"""
  result = """
 {
   "creatures":[
     {
       "__typename":"Tree",
       "name":"redwood",
       "age":100
     },
     {
        "__typename":"Bird",
        "name":"parrot",
        "color":"RED"
     }
   ]
 }
"""

[[units]]
  name = "spread fragment with union and object"
  code = """
type Tree {
  name: String
  age: Int
}
enum COLORS {
  RED
  YELLOW
  GREEN
}
type Bird {
  name: String
  color: COLORS
}
union Creature = Tree | Bird
type Query {
  creatures: [Creature]
}
fragment tree on Tree {
  name
  age
}
fragment bird on Bird {
  name
  color
}
{
  creatures {
    __typename
    ... tree
    ... bird
  }
}
"""
  result = """
{
  "creatures":[
    {
      "__typename":"Tree",
      "name":"redwood",
      "age":100
    },
    {
       "__typename":"Bird",
       "name":"parrot",
       "color":"RED"
    }
  ]
}
"""

[[units]]
  name = "graphql-spec#793 case #1"
  opName = "A"
  code = """
type Query {
  example(inputObject: ExampleInputObject! = {}): Int
}

input ExampleInputObject {
  number: Int! = 3
}
query A {
  example
}
"""
  result = """
{
  "example":3
}
"""

[[units]]
  name = "graphql-spec#793 case #2"
  opName = "B"
  code = """
type Query {
  example(inputObject: ExampleInputObject! = {}): Int
}

input ExampleInputObject {
  number: Int! = 3
}
query B {
  example(inputObject: {})
}
"""
  result = """
{
  "example":3
}
"""

[[units]]
  name = "graphql-spec#793 case #3"
  opName = "C"
  code = """
type Query {
  example(inputObject: ExampleInputObject! = {}): Int
}

input ExampleInputObject {
  number: Int! = 3
}
query C {
  example(inputObject: { number: 3 })
}
"""
  result = """
{
  "example":3
}
"""

[[units]]
  name = "graphql-spec#793 case #4"
  opName = "D"
  code = """
type Query {
  example(inputObject: ExampleInputObject! = {}): Int
}

input ExampleInputObject {
  number: Int! = 3
}
query D($inputObject: ExampleInputObject! = {}) {
  example(inputObject: $inputObject)
}
"""
  result = """
{
  "example":3
}
"""

[[units]]
  name = "empty list as variable value"
  errors = ["[5, 8]: Error: 'arg' got 'List': expect string, but got 'List': @[]"]
  variables = """{mm: []}"""
  code = """
type Query {
  echo(arg: String): String
}
query($mm: String) {
  echo(arg: $mm)
}
"""
  result = """
null
"""

[[units]]
  name = "unicode chars as UTF-8"
  code = """
type Query {
  echo(arg: String): String
}
query {
  echo(arg: "hello 你好 世界 world")
}
"""
  result = """
{"echo":"hello 你好 世界 world"}
"""

[[units]]
  name = "unicode chars as variable length escaped hex"
  code = """
type Query {
  echo(arg: String): String
}
query {
  echo(arg: "hello \\u{4f60}\\u{597d} \\u{4e16}\\u{754c} world")
}
"""
  result = """
{"echo":"hello 你好 世界 world"}
"""

[[units]]
  name = "unicode chars as fixed length escaped hex"
  code = """
type Query {
  echo(arg: String): String
}
query {
  echo(arg: "hello \\u4f60\\u597d \\u4e16\\u754c world")
}
"""
  result = """
{"echo":"hello 你好 世界 world"}
"""

[[units]]
  name = "unicode chars as fixed length escaped hex with surrogate pair"
  code = """
type Query {
  echo(arg: String): String
}
query {
  echo(arg: "brahmi \\ud804\\udc0a\\ud804\\udc0b\\ud804\\udc0c abc")
}
"""
  result = """
{"echo":"brahmi 𑀊𑀋𑀌 abc"}
"""

[[units]]
  name = "unicode chars as variable length escaped hex for SMP chars"
  code = """
type Query {
  echo(arg: String): String
}
query {
  echo(arg: "brahmi \\u{1100a}\\u{1100b}\\u{1100c} abc")
}
"""
  result = """
{"echo":"brahmi 𑀊𑀋𑀌 abc"}
"""

[[units]]
  name = "introspection of defaultValue of input object's fields"
  code = """
type Query {
  name: String
}
enum Sex {
  Male
  Female
}
input Person {
  name: String = "anonymous"
  id: ID = 567
  age: Int = 60
  sex: Sex = Male
  smoking: Boolean = false
  height: Float = 5.5
}
query intros {
  __type(name: "Person") {
    inputFields {
      name
      type {
        name
      }
      defaultValue
    }
  }
}
"""
  result = """
{ "__type":{
    "inputFields":[
      {
        "name":"name",
        "type":{"name":"String"},
        "defaultValue":"\\\"anonymous\\\""
      },
      {
        "name":"id",
        "type":{"name":"ID"},
        "defaultValue":"\\\"567\\\""
      },
      {
        "name":"age",
        "type":{"name":"Int"},
        "defaultValue":"60"
      },
      {
        "name":"sex",
        "type":{"name":"Sex"},
        "defaultValue":"Male"
      },
      {
        "name":"smoking",
        "type":{"name":"Boolean"},
        "defaultValue":"false"
      },
      {
        "name":"height",
        "type":{"name":"Float"},
        "defaultValue":"5.5"
      }
    ]
  }
}
"""

# Issue #1044, what is the expected behavior of where.name?, null, empty or error?
[[units]]
  name = "input no default value, variable no default value, variable no value"
  code = """
input Where {
  id: ID
  name: String
}

type Object {
  id: ID
  name: String
}

type Query {
  object(where: Where): Object
}

query Query($name: String) {
  object(where: {name: $name}) {
    id
  }
}
"""
  result = """
{
  "object": null
}
"""
